sample path, correct (yes/no), result, prologTerm
Samples/CMDS/CMDS(defs).aps, yes, Bien typé., "prog([cmds(const(a,int,num(1))),cmds(const(b,int,num(3))),cmds(fun(f,int,[(x,int),(y,int)],app(id(add),[app(id(mul),[num(42),id(x)]),app(id(sub),[app(id(div),[id(y),num(2)]),num(42)])]))),echo(app(id(f),[id(a),id(b)]))])."
Samples/CMDS/CMDS(end).aps, yes, Bien typé., "prog([echo(num(42))])."
Samples/TYPE/TYPE.aps, yes, Bien typé., "prog([cmds(const(a,int,num(5))),echo(id(a))])."
Samples/TYPE/TYPES.aps, yes, Bien typé., "prog([cmds(fun(f,int,[(x,int),(y,bool)],app(id(add),[app(id(mul),[num(42),id(x)]),if(id(y),num(1),num(0))]))),echo(app(id(f),[num(1),id(true)]))])."
Samples/ER(2023_3).aps, yes, Bien typé., "prog([cmds(funRec(fib,int,[(x,int)],if(app(id(lt),[id(x),num(1)]),num(1),app(id(add),[app(id(fib),[app(id(sub),[id(x),num(1)])]),app(id(fib),[app(id(sub),[id(x),num(2)])])])))),echo(app(id(fib),[num(3)]))])."
Samples/prog7.aps, yes, Bien typé., "prog([echo(if(or(id(true),id(false)),num(5),num(10)))])."
Samples/DEF/DEF(const).aps, yes, Bien typé., "prog([cmds(const(a,int,num(3))),echo(id(a))])."
Samples/DEF/DEF(funRec).aps, yes, Bien typé., "prog([cmds(funRec(somme,int,[(n,int)],if(app(id(eq),[id(n),num(0)]),num(0),app(id(add),[id(n),app(id(somme),[app(id(sub),[id(n),num(1)])])])))),echo(app(id(somme),[num(3)]))])."
Samples/DEF/DEF(fun).aps, yes, Bien typé., "prog([cmds(fun(f,int,[(x,int),(y,int)],app(id(add),[app(id(mul),[num(42),id(x)]),app(id(sub),[app(id(div),[id(y),num(2)]),num(42)])]))),echo(app(id(f),[num(1),num(100)]))])."
Samples/EXPR/EXPR(if_1).aps, yes, Bien typé., "prog([echo(if(id(false),num(1),num(0)))])."
Samples/EXPR/EXPR(or_10).aps, yes, Bien typé., "prog([echo(if(or(id(true),id(false)),num(1),num(0)))])."
Samples/EXPR/EXPR(app_mul).aps, yes, Bien typé., "prog([echo(app(id(mul),[num(5),num(5)]))])."
Samples/EXPR/EXPR(app_f).aps, yes, Bien typé., "prog([cmds(fun(f,int,[(x,int),(y,int)],app(id(add),[app(id(mul),[num(42),id(x)]),app(id(sub),[app(id(div),[id(y),num(2)]),num(42)])]))),echo(app(id(f),[num(1),num(100)]))])."
Samples/EXPR/EXPR(not_0).aps, yes, Bien typé., "prog([echo(if(app(id(not),[id(false)]),num(1),num(0)))])."
Samples/EXPR/EXPR(if_0).aps, yes, Bien typé., "prog([echo(if(id(true),num(1),num(0)))])."
Samples/EXPR/EXPR(lt_0).aps, yes, Bien typé., "prog([echo(if(app(id(lt),[num(42),num(41)]),num(1),num(0)))])."
Samples/EXPR/EXPR(num).aps, yes, Bien typé., "prog([echo(num(42))])."
Samples/EXPR/EXPR(and_01).aps, yes, Bien typé., "prog([echo(if(and(id(false),id(true)),num(10),num(11)))])."
Samples/EXPR/EXPR(eq_1).aps, yes, Bien typé., "prog([echo(if(app(id(eq),[num(42),num(42)]),num(1),num(0)))])."
Samples/EXPR/EXPR(app_sub).aps, yes, Bien typé., "prog([echo(app(id(sub),[num(42),num(17)]))])."
Samples/EXPR/EXPR(and_11).aps, yes, Bien typé., "prog([echo(if(and(id(true),id(true)),num(10),num(11)))])."
Samples/EXPR/EXPR(app_add).aps, yes, Bien typé., "prog([echo(app(id(add),[num(1),num(42)]))])."
Samples/EXPR/EXPR(app_div).aps, yes, Bien typé., "prog([echo(app(id(div),[num(30),num(14)]))])."
Samples/EXPR/EXPR(or_01).aps, yes, Bien typé., "prog([echo(if(or(id(false),id(true)),num(1),num(0)))])."
Samples/EXPR/EXPR(not_1).aps, yes, Bien typé., "prog([echo(if(app(id(not),[id(true)]),num(1),num(0)))])."
Samples/EXPR/EXPR(or_11).aps, yes, Bien typé., "prog([echo(if(or(id(true),id(true)),num(1),num(0)))])."
Samples/EXPR/EXPR(or_00).aps, yes, Bien typé., "prog([echo(if(or(id(false),id(false)),num(1),num(0)))])."
Samples/EXPR/EXPR(id).aps, yes, Bien typé., "prog([cmds(const(a,int,num(3))),echo(id(a))])."
Samples/EXPR/EXPR(and_10).aps, yes, Bien typé., "prog([echo(if(and(id(true),id(false)),num(10),num(11)))])."
Samples/EXPR/EXPR(lt_1).aps, yes, Bien typé., "prog([echo(if(app(id(lt),[num(41),num(42)]),num(1),num(0)))])."
Samples/EXPR/EXPR(and_00).aps, yes, Bien typé., "prog([echo(if(and(id(false),id(false)),num(10),num(11)))])."
Samples/EXPR/EXPR(eq_0).aps, yes, Bien typé., "prog([echo(if(app(id(eq),[num(42),num(41)]),num(1),num(0)))])."
Samples/EXPR/EXPR(abs).aps, yes, Bien typé., "prog([cmds(fun(f,int,[(x,bool),(y,int)],if(id(x),id(y),num(0)))),echo(app(lambda([(b,bool)],app(id(f),[id(b),num(42)])),[id(true)]))])."
Samples/prog9.aps, yes, Bien typé., "prog([echo(app(lambda([(a,int)],app(id(sub),[id(a),num(2)])),[num(4)]))])."
Samples/prog10.aps, yes, Bien typé., "prog([cmds(funRec(f,int,[(x,int)],num(0))),echo(num(56))])."
Samples/ER(2023_1).aps, yes, Bien typé., "prog([cmds(const(u,int,num(3))),cmds(const(v,int,num(2))),cmds(fun(f,int,[(x,int),(y,int)],app(id(add),[id(x),id(y)]))),echo(app(id(f),[id(u),id(v)]))])."
Samples/ER(2024_1).aps, yes, Bien typé., "prog([cmds(const(u,int,num(3))),cmds(fun(f,int,[(x,bool),(y,int)],if(id(x),id(y),id(u)))),cmds(const(u,int,num(10))),echo(app(id(f),[app(id(eq),[id(u),num(3)]),id(u)]))])."
Samples/STAT/STAT(echo).aps, yes, Bien typé., "prog([echo(num(42))])."
Samples/prog1.aps, yes, Bien typé., "prog([cmds(const(x,int,num(20))),echo(id(x))])."
Samples/prog6.aps, yes, Bien typé., "prog([echo(if(and(id(true),id(false)),num(8),num(9)))])."
Samples/ER(2023_2).aps, yes, Bien typé., "prog([cmds(const(x,int,num(3))),cmds(fun(f,int,[(x,int)],app(id(add),[id(x),num(1)]))),cmds(fun(f,bool,[(y,int)],app(id(eq),[id(x),app(id(f),[id(y)])]))),echo(if(app(id(f),[num(2)]),id(x),num(0)))])."
Samples/prog8.aps, yes, Bien typé., "prog([cmds(const(a,int,num(3))),echo(id(a))])."
Samples/ER(2024_2).aps, yes, Bien typé., "prog([cmds(funRec(somme,int,[(n,int)],if(app(id(eq),[id(n),num(0)]),num(0),app(id(add),[id(n),app(id(somme),[app(id(sub),[id(n),num(1)])])])))),echo(app(id(somme),[num(3)]))])."
Samples/prog4.aps, yes, Bien typé., "prog([cmds(const(x,int,num(10))),cmds(const(y,int,num(20))),echo(app(id(add),[app(id(mul),[num(10),id(x)]),app(id(sub),[app(id(div),[id(y),num(2)]),num(10)])]))])."
Samples/prog3.aps, yes, Bien typé., "prog([cmds(const(x,int,num(10))),echo(app(id(add),[id(x),app(id(add),[id(x),num(10)])]))])."
Samples/prog0.aps, yes, Bien typé., "prog([echo(num(42))])."
Samples/APS0/isEven.aps, yes, Bien typé., "prog([cmds(funRec(isEven,bool,[(n,int)],if(app(id(lt),[id(n),num(2)]),app(id(eq),[id(n),num(0)]),app(id(isEven),[app(id(sub),[id(n),num(2)])])))),echo(num(10))])."
Samples/APS0/fact.aps, yes, Bien typé., "prog([cmds(funRec(fact,int,[(n,int)],if(app(id(eq),[id(n),num(0)]),num(1),app(id(mul),[id(n),app(id(fact),[app(id(sub),[id(n),num(1)])])])))),echo(app(id(fact),[num(5)]))])."
Samples/APS0/pgcd.aps, yes, Bien typé., "prog([cmds(funRec(pgcd,int,[(a,int),(b,int)],if(app(id(eq),[id(a),id(b)]),id(a),if(app(id(lt),[id(a),id(b)]),app(id(pgcd),[id(a),app(id(sub),[id(b),id(a)])]),app(id(pgcd),[app(id(sub),[id(a),id(b)]),id(b)]))))),echo(app(id(pgcd),[num(48),num(18)]))])."
Samples/APS0/fib.aps, yes, Bien typé., "prog([cmds(funRec(fib,int,[(n,int)],if(app(id(lt),[id(n),num(2)]),id(n),app(id(add),[app(id(fib),[app(id(sub),[id(n),num(1)])]),app(id(fib),[app(id(sub),[id(n),num(2)])])])))),echo(app(id(fib),[num(10)]))])."
Samples/APS0/pow.aps, yes, Bien typé., "prog([cmds(funRec(pow,int,[(base,int),(exponent,int)],if(app(id(eq),[id(exponent),num(0)]),num(1),app(id(mul),[id(base),app(id(pow),[id(base),app(id(sub),[id(exponent),num(1)])])])))),echo(app(id(pow),[num(2),num(8)]))])."
Samples/ARG/ARGS.aps, yes, Bien typé., "prog([cmds(fun(f,int,[(x,int),(y,int)],app(id(add),[app(id(mul),[num(42),id(x)]),app(id(sub),[app(id(div),[id(y),num(2)]),num(42)])]))),echo(app(id(f),[num(1),num(100)]))])."
Samples/prog2.aps, yes, Bien typé., "prog([cmds(const(hichem,int,num(21))),echo(app(id(add),[id(hichem),num(1)]))])."
Samples/prog5.aps, yes, Bien typé., "prog([echo(if(id(true),num(2),num(3)))])."
