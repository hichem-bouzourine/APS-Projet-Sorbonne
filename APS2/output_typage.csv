sample path, correct (yes/no), result, prologTerm
Samples/CMDS/CMDS(defs).aps, yes, Bien typé., "prog(block([cmds(const(a,int,num(1))),cmds(const(b,int,num(3))),cmds(fun(f,int,[(x,int),(y,int)],app(id(add),[app(id(mul),[num(42),id(x)]),app(id(sub),[app(id(div),[id(y),num(2)]),num(42)])]))),echo(app(id(f),[id(a),id(b)]))]))."
Samples/CMDS/CMDS(end).aps, yes, Bien typé., "prog(block([echo(num(42))]))."
Samples/TYPE/TYPE.aps, yes, Bien typé., "prog(block([cmds(const(a,int,num(5))),echo(id(a))]))."
Samples/TYPE/TYPES.aps, yes, Bien typé., "prog(block([cmds(fun(f,int,[(x,int),(y,bool)],app(id(add),[app(id(mul),[num(42),id(x)]),if(id(y),num(1),num(0))]))),echo(app(id(f),[num(1),id(true)]))]))."
Samples/ER(2023_3).aps, yes, Bien typé., "prog(block([cmds(funRec(fib,int,[(x,int)],if(app(id(lt),[id(x),num(1)]),num(1),app(id(add),[app(id(fib),[app(id(sub),[id(x),num(1)])]),app(id(fib),[app(id(sub),[id(x),num(2)])])])))),echo(app(id(fib),[num(3)]))]))."
Samples/prog7.aps, yes, Bien typé., "prog(block([echo(if(or(id(true),id(false)),num(5),num(10)))]))."
Samples/DEF/DEF(proc).aps, yes, Bien typé., "prog(block([cmds(const(x,int,num(5))),cmds(proc(hichem,[(arg(x),int),(arg(y),int)],block([echo(app(id(add),[id(x),id(y)]))]))),echo(id(x))]))."
Samples/DEF/DEF(VAR).aps, yes, Bien typé., "prog(block([cmds(var(x,int)),set(id(x),num(11)),echo(id(x))]))."
Samples/DEF/DEF(const).aps, yes, Bien typé., "prog(block([cmds(const(a,int,num(3))),echo(id(a))]))."
Samples/DEF/DEF(ProcRec).aps, yes, Bien typé., "prog(block([cmds(procRec(test,[(arg(a),int)],block([if(app(id(eq),[id(a),num(1)]),block([echo(num(1))]),block([call(id(test),[app(id(sub),[id(a),num(1)])])]))]))),call(id(test),[num(5)])]))."
Samples/DEF/DEF(funRec).aps, yes, Bien typé., "prog(block([cmds(funRec(somme,int,[(n,int)],if(app(id(eq),[id(n),num(0)]),num(0),app(id(add),[id(n),app(id(somme),[app(id(sub),[id(n),num(1)])])])))),echo(app(id(somme),[num(3)]))]))."
Samples/DEF/DEF(fun).aps, yes, Bien typé., "prog(block([cmds(fun(f,int,[(x,int),(y,int)],app(id(add),[app(id(mul),[num(42),id(x)]),app(id(sub),[app(id(div),[id(y),num(2)]),num(42)])]))),echo(app(id(f),[num(1),num(100)]))]))."
Samples/EXPR/EXPR(if_1).aps, yes, Bien typé., "prog(block([echo(if(id(false),num(1),num(0)))]))."
Samples/EXPR/EXPR(or_10).aps, yes, Bien typé., "prog(block([echo(if(or(id(true),id(false)),num(1),num(0)))]))."
Samples/EXPR/EXPR(app_mul).aps, yes, Bien typé., "prog(block([echo(app(id(mul),[num(5),num(5)]))]))."
Samples/EXPR/EXPR(app_f).aps, yes, Bien typé., "prog(block([cmds(fun(f,int,[(x,int),(y,int)],app(id(add),[app(id(mul),[num(42),id(x)]),app(id(sub),[app(id(div),[id(y),num(2)]),num(42)])]))),echo(app(id(f),[num(1),num(100)]))]))."
Samples/EXPR/EXPR(not_0).aps, yes, Bien typé., "prog(block([echo(if(app(id(not),[id(false)]),num(1),num(0)))]))."
Samples/EXPR/EXPR(if_0).aps, yes, Bien typé., "prog(block([echo(if(id(true),num(1),num(0)))]))."
Samples/EXPR/EXPR(lt_0).aps, yes, Bien typé., "prog(block([echo(if(app(id(lt),[num(42),num(41)]),num(1),num(0)))]))."
Samples/EXPR/EXPR(num).aps, yes, Bien typé., "prog(block([echo(num(42))]))."
Samples/EXPR/EXPR(and_01).aps, yes, Bien typé., "prog(block([echo(if(and(id(false),id(true)),num(10),num(11)))]))."
Samples/EXPR/EXPR(eq_1).aps, yes, Bien typé., "prog(block([echo(if(app(id(eq),[num(42),num(42)]),num(1),num(0)))]))."
Samples/EXPR/EXPR(app_sub).aps, yes, Bien typé., "prog(block([echo(app(id(sub),[num(42),num(17)]))]))."
Samples/EXPR/EXPR(and_11).aps, yes, Bien typé., "prog(block([echo(if(and(id(true),id(true)),num(10),num(11)))]))."
Samples/EXPR/EXPR(app_add).aps, yes, Bien typé., "prog(block([echo(app(id(add),[num(1),num(42)]))]))."
Samples/EXPR/EXPR(app_div).aps, yes, Bien typé., "prog(block([echo(app(id(div),[num(30),num(14)]))]))."
Samples/EXPR/EXPR(or_01).aps, yes, Bien typé., "prog(block([echo(if(or(id(false),id(true)),num(1),num(0)))]))."
Samples/EXPR/EXPR(not_1).aps, yes, Bien typé., "prog(block([echo(if(app(id(not),[id(true)]),num(1),num(0)))]))."
Samples/EXPR/EXPR(or_11).aps, yes, Bien typé., "prog(block([echo(if(or(id(true),id(true)),num(1),num(0)))]))."
Samples/EXPR/EXPR(or_00).aps, yes, Bien typé., "prog(block([echo(if(or(id(false),id(false)),num(1),num(0)))]))."
Samples/EXPR/EXPR(id).aps, yes, Bien typé., "prog(block([cmds(const(a,int,num(3))),echo(id(a))]))."
Samples/EXPR/EXPR(and_10).aps, yes, Bien typé., "prog(block([echo(if(and(id(true),id(false)),num(10),num(11)))]))."
Samples/EXPR/EXPR(lt_1).aps, yes, Bien typé., "prog(block([echo(if(app(id(lt),[num(41),num(42)]),num(1),num(0)))]))."
Samples/EXPR/EXPR(and_00).aps, yes, Bien typé., "prog(block([echo(if(and(id(false),id(false)),num(10),num(11)))]))."
Samples/EXPR/EXPR(eq_0).aps, yes, Bien typé., "prog(block([echo(if(app(id(eq),[num(42),num(41)]),num(1),num(0)))]))."
Samples/EXPR/EXPR(abs).aps, yes, Bien typé., "prog(block([cmds(fun(f,int,[(x,bool),(y,int)],if(id(x),id(y),num(0)))),echo(app(lambda([(b,bool)],app(id(f),[id(b),num(42)])),[id(true)]))]))."
Samples/APS2/bigVect.aps, yes, Bien typé., "prog(block([cmds(var(monvecteur,vectorType(int))),set(id(monvecteur),alloc(num(50))),cmds(var(i,int)),set(id(i),num(0)),while(app(id(lt),[id(i),len(id(monvecteur))]),block([set(vectorValue(id(monvecteur),id(i)),id(i)),set(id(i),app(id(add),[id(i),num(1)]))])),set(id(i),num(0)),while(app(id(lt),[id(i),len(id(monvecteur))]),block([echo(nth(id(monvecteur),id(i))),set(id(i),app(id(add),[id(i),num(1)]))]))]))."
Samples/APS2/vect.aps, yes, Bien typé., "prog(block([cmds(var(monvecteur,vectorType(bool))),set(id(monvecteur),alloc(num(2))),set(vectorValue(id(monvecteur),num(0)),id(true)),set(vectorValue(id(monvecteur),num(1)),id(false)),if(nth(id(monvecteur),num(0)),block([echo(num(1))]),block([echo(num(0))]))]))."
Samples/APS2/ER2_2023.aps, yes, Bien typé., "prog(block([cmds(const(s,int,num(3))),cmds(var(t,vectorType(int))),set(id(t),alloc(id(s))),cmds(var(c,int)),set(id(c),num(0)),while(app(id(lt),[id(c),id(s)]),block([set(vectorValue(id(t),id(c)),id(c)),set(id(c),app(id(add),[id(c),num(1)]))])),echo(nth(id(t),num(0))),echo(nth(id(t),num(1))),echo(nth(id(t),num(2)))]))."
Samples/APS2/invertTab.aps, yes, Bien typé., "prog(block([cmds(var(arr,vectorType(int))),set(id(arr),alloc(num(5))),set(vectorValue(id(arr),num(0)),num(1)),set(vectorValue(id(arr),num(1)),num(2)),set(vectorValue(id(arr),num(2)),num(3)),set(vectorValue(id(arr),num(3)),num(4)),set(vectorValue(id(arr),num(4)),num(5)),cmds(var(i,int)),set(id(i),num(0)),while(app(id(lt),[id(i),app(id(div),[len(id(arr)),num(2)])]),block([cmds(var(temp,int)),set(id(temp),nth(id(arr),id(i))),set(vectorValue(id(arr),id(i)),nth(id(arr),app(id(sub),[len(id(arr)),app(id(add),[id(i),num(1)])]))),set(vectorValue(id(arr),app(id(sub),[len(id(arr)),app(id(add),[id(i),num(1)])])),id(temp)),set(id(i),app(id(add),[id(i),num(1)]))])),echo(nth(id(arr),num(0))),echo(nth(id(arr),num(1))),echo(nth(id(arr),num(2))),echo(nth(id(arr),num(3))),echo(nth(id(arr),num(4)))]))."
Samples/APS2/matrix.aps, yes, Bien typé., "prog(block([cmds(var(vec0,vectorType(int))),set(id(vec0),alloc(num(3))),set(vectorValue(id(vec0),num(0)),num(0)),set(vectorValue(id(vec0),num(1)),num(1)),cmds(var(vec1,vectorType(int))),set(id(vec1),alloc(num(3))),set(vectorValue(id(vec1),num(0)),num(2)),set(vectorValue(id(vec1),num(1)),num(3)),cmds(var(matrice,vectorType(vectorType(int)))),set(id(matrice),alloc(num(4))),set(vectorValue(id(matrice),num(0)),id(vec0)),set(vectorValue(id(matrice),num(1)),id(vec1)),echo(nth(nth(id(matrice),num(0)),num(0))),echo(nth(nth(id(matrice),num(0)),num(1))),echo(nth(nth(id(matrice),num(1)),num(0))),echo(nth(nth(id(matrice),num(1)),num(1)))]))."
Samples/APS2/copyVect.aps, yes, Bien typé., "prog(block([cmds(var(src,vectorType(int))),set(id(src),alloc(num(10))),set(vectorValue(id(src),num(0)),num(7)),set(vectorValue(id(src),num(1)),num(8)),set(vectorValue(id(src),num(2)),num(9)),cmds(var(dest,vectorType(int))),set(id(dest),alloc(len(id(src)))),cmds(var(i,int)),set(id(i),num(0)),while(app(id(lt),[id(i),len(id(src))]),block([set(vectorValue(id(dest),id(i)),nth(id(src),id(i))),set(id(i),app(id(add),[id(i),num(1)]))])),echo(nth(id(dest),num(0))),echo(nth(id(dest),num(1))),echo(nth(id(dest),num(2)))]))."
Samples/APS2/isPalindrome.aps, yes, Bien typé., "prog(block([cmds(proc(isPalindrome,[(arg(x),vectorType(int))],block([cmds(var(i,int)),set(id(i),num(0)),cmds(var(j,int)),set(id(j),app(id(sub),[len(id(x)),num(1)])),cmds(var(result,int)),set(id(result),num(1)),while(app(id(lt),[id(i),id(j)]),block([if(app(id(eq),[nth(id(x),id(i)),nth(id(x),id(j))]),block([echo(num(9))]),block([set(id(result),num(0))])),set(id(i),app(id(add),[id(i),num(1)])),set(id(j),app(id(sub),[id(j),num(1)]))])),echo(id(result))]))),cmds(var(word0,vectorType(int))),set(id(word0),alloc(num(7))),set(vectorValue(id(word0),num(0)),num(5)),set(vectorValue(id(word0),num(1)),num(6)),set(vectorValue(id(word0),num(2)),num(9)),set(vectorValue(id(word0),num(3)),num(1)),set(vectorValue(id(word0),num(4)),num(9)),set(vectorValue(id(word0),num(5)),num(6)),set(vectorValue(id(word0),num(6)),num(5)),cmds(var(word1,vectorType(int))),set(id(word1),alloc(num(7))),set(vectorValue(id(word1),num(0)),num(5)),set(vectorValue(id(word1),num(1)),num(33)),set(vectorValue(id(word1),num(2)),num(22)),set(vectorValue(id(word1),num(3)),num(37)),set(vectorValue(id(word1),num(4)),num(21)),set(vectorValue(id(word1),num(5)),num(300)),set(vectorValue(id(word1),num(6)),num(23)),cmds(var(word2,vectorType(int))),set(id(word2),alloc(num(7))),set(vectorValue(id(word2),num(0)),num(25)),set(vectorValue(id(word2),num(1)),num(37)),set(vectorValue(id(word2),num(2)),num(23)),set(vectorValue(id(word2),num(3)),num(39)),set(vectorValue(id(word2),num(4)),num(27)),set(vectorValue(id(word2),num(5)),num(38)),set(vectorValue(id(word2),num(6)),num(21)),cmds(var(word3,vectorType(int))),set(id(word3),alloc(num(7))),set(vectorValue(id(word3),num(0)),num(1)),set(vectorValue(id(word3),num(1)),num(2)),set(vectorValue(id(word3),num(2)),num(3)),set(vectorValue(id(word3),num(3)),num(4)),set(vectorValue(id(word3),num(4)),num(3)),set(vectorValue(id(word3),num(5)),num(2)),set(vectorValue(id(word3),num(6)),num(1)),cmds(var(dictionary,vectorType(vectorType(int)))),set(id(dictionary),alloc(num(4))),set(vectorValue(id(dictionary),num(0)),id(word0)),set(vectorValue(id(dictionary),num(1)),id(word1)),set(vectorValue(id(dictionary),num(2)),id(word2)),set(vectorValue(id(dictionary),num(3)),id(word3)),cmds(var(k,int)),set(id(k),num(0)),while(app(id(lt),[id(k),len(id(dictionary))]),block([call(id(isPalindrome),[nth(id(dictionary),id(k))]),set(id(k),app(id(add),[id(k),num(1)]))]))]))."
Samples/APS2/maxVec.aps, yes, Bien typé., "prog(block([cmds(var(nums,vectorType(int))),set(id(nums),alloc(num(5))),set(vectorValue(id(nums),num(0)),num(1)),set(vectorValue(id(nums),num(1)),num(3)),set(vectorValue(id(nums),num(2)),num(2)),set(vectorValue(id(nums),num(3)),num(5)),set(vectorValue(id(nums),num(4)),num(4)),cmds(var(max,int)),set(id(max),nth(id(nums),num(0))),cmds(var(i,int)),set(id(i),num(1)),while(app(id(lt),[id(i),len(id(nums))]),block([if(app(id(lt),[id(max),nth(id(nums),id(i))]),block([set(id(max),nth(id(nums),id(i)))]),block([echo(num(1))])),set(id(i),app(id(add),[id(i),num(1)]))])),echo(id(max))]))."
Samples/APS2/3Dtensor.aps, no, Erreur de typage !!!, "prog(block([cmds(var(cube0,vectorType(vectorType(vectorType(int))))),set(id(cube0),alloc(num(3))),cmds(var(vec0,vectorType(vectorType(int)))),set(id(vec0),alloc(num(3))),set(vectorValue(id(cube0),num(0)),id(vec0)),cmds(var(vec1,vectorType(vectorType(int)))),set(id(vec1),alloc(num(3))),set(vectorValue(id(cube0),num(1)),id(vec1)),cmds(var(vec2,vectorType(vectorType(int)))),set(id(vec2),alloc(num(3))),set(vectorValue(id(cube0),num(2)),id(vec2)),set(vectorValue(vectorValue(id(cube0),num(0)),num(0)),alloc(num(3))),set(vectorValue(vectorValue(id(cube0),num(0)),num(1)),alloc(num(3))),set(vectorValue(vectorValue(id(cube0),num(0)),num(2)),alloc(num(3))),set(vectorValue(vectorValue(id(cube0),num(1)),num(0)),alloc(num(3))),set(vectorValue(vectorValue(id(cube0),num(1)),num(1)),alloc(num(3))),set(vectorValue(vectorValue(id(cube0),num(1)),num(2)),alloc(num(3))),set(vectorValue(vectorValue(id(cube0),num(2)),num(0)),alloc(num(3))),set(vectorValue(vectorValue(id(cube0),num(2)),num(1)),alloc(num(3))),set(vectorValue(vectorValue(id(cube0),num(2)),num(2)),alloc(num(3))),cmds(var(i,int)),set(id(i),num(0)),while(app(id(lt),[id(i),len(id(cube0))]),block([set(id(j),num(0)),while(app(id(lt),[id(j),len(nth(id(cube0),id(i)))]),block([set(id(k),num(0)),while(app(id(lt),[id(k),len(nth(nth(id(cube0),id(i)),id(j)))]),block([set(vectorValue(vectorValue(vectorValue(id(cube0),id(i)),id(j)),id(k)),app(id(add),[app(id(mul),[id(i),num(9)]),app(id(add),[app(id(mul),[id(j),num(3)]),id(k)])])),set(id(k),app(id(add),[id(k),num(1)]))])),set(id(j),app(id(add),[id(j),num(1)]))])),set(id(i),app(id(add),[id(i),num(1)]))])),set(id(i),num(0)),while(app(id(lt),[id(i),len(id(cube0))]),block([set(id(j),num(0)),while(app(id(lt),[id(j),len(nth(id(cube0),id(i)))]),block([set(id(k),num(0)),while(app(id(lt),[id(k),len(nth(nth(id(cube0),id(i)),id(j)))]),block([echo(nth(nth(nth(id(cube0),id(i)),id(j)),id(k))),set(id(k),app(id(add),[id(k),num(1)]))])),set(id(j),app(id(add),[id(j),num(1)]))])),set(id(i),app(id(add),[id(i),num(1)]))]))]))."
Samples/prog9.aps, yes, Bien typé., "prog(block([echo(app(lambda([(a,int)],app(id(sub),[id(a),num(2)])),[num(4)]))]))."
Samples/prog10.aps, yes, Bien typé., "prog(block([cmds(funRec(f,int,[(x,int)],num(0))),echo(num(56))]))."
Samples/ER(2023_1).aps, yes, Bien typé., "prog(block([cmds(const(u,int,num(3))),cmds(const(v,int,num(2))),cmds(fun(f,int,[(x,int),(y,int)],app(id(add),[id(x),id(y)]))),echo(app(id(f),[id(u),id(v)]))]))."
Samples/ER(2024_1).aps, yes, Bien typé., "prog(block([cmds(const(u,int,num(3))),cmds(fun(f,int,[(x,bool),(y,int)],if(id(x),id(y),id(u)))),cmds(const(u,int,num(10))),echo(app(id(f),[app(id(eq),[id(u),num(3)]),id(u)]))]))."
Samples/STAT/STAT(if).aps, yes, Bien typé., "prog(block([cmds(const(x,int,num(5))),if(id(true),block([echo(id(x))]),block([echo(num(0))])),echo(num(1))]))."
Samples/STAT/STAT(call-aps1a).aps, yes, Bien typé., "prog(block([cmds(var(y,int)),set(id(y),num(1)),cmds(proc(x,[(argVar(z),int)],block([echo(id(z)),set(id(z),num(2))]))),call(id(x),[exprProcAdr(y)]),echo(id(y))]))."
Samples/STAT/STAT(while).aps, yes, Bien typé., "prog(block([cmds(var(x,int)),set(id(x),num(5)),while(app(id(lt),[id(x),num(10)]),block([set(id(x),app(id(add),[id(x),num(1)])),echo(id(x))]))]))."
Samples/STAT/STAT(call).aps, yes, Bien typé., "prog(block([cmds(var(x,int)),set(id(x),num(5)),cmds(proc(hichem,[(arg(y),int)],block([set(id(x),num(10)),echo(app(id(add),[id(x),id(y)]))]))),call(id(hichem),[id(x)])]))."
Samples/STAT/STAT(set).aps, yes, Bien typé., "prog(block([cmds(var(x,int)),set(id(x),num(5)),echo(id(x))]))."
Samples/STAT/STAT(echo).aps, yes, Bien typé., "prog(block([echo(num(42))]))."
Samples/prog1.aps, yes, Bien typé., "prog(block([cmds(const(x,int,num(20))),echo(id(x))]))."
Samples/prog6.aps, yes, Bien typé., "prog(block([echo(if(and(id(true),id(false)),num(8),num(9)))]))."
Samples/ER(2023_2).aps, yes, Bien typé., "prog(block([cmds(const(x,int,num(3))),cmds(fun(f,int,[(x,int)],app(id(add),[id(x),num(1)]))),cmds(fun(f,bool,[(y,int)],app(id(eq),[id(x),app(id(f),[id(y)])]))),echo(if(app(id(f),[num(2)]),id(x),num(0)))]))."
Samples/prog8.aps, yes, Bien typé., "prog(block([cmds(const(a,int,num(3))),echo(id(a))]))."
Samples/ER(2024_2).aps, yes, Bien typé., "prog(block([cmds(funRec(somme,int,[(n,int)],if(app(id(eq),[id(n),num(0)]),num(0),app(id(add),[id(n),app(id(somme),[app(id(sub),[id(n),num(1)])])])))),echo(app(id(somme),[num(3)]))]))."
Samples/prog4.aps, yes, Bien typé., "prog(block([cmds(const(x,int,num(10))),cmds(const(y,int,num(20))),echo(app(id(add),[app(id(mul),[num(10),id(x)]),app(id(sub),[app(id(div),[id(y),num(2)]),num(10)])]))]))."
Samples/prog3.aps, yes, Bien typé., "prog(block([cmds(const(x,int,num(10))),echo(app(id(add),[id(x),app(id(add),[id(x),num(10)])]))]))."
Samples/prog0.aps, yes, Bien typé., "prog(block([echo(num(42))]))."
Samples/APS0/isEven.aps, yes, Bien typé., "prog(block([cmds(funRec(isEven,bool,[(n,int)],if(app(id(lt),[id(n),num(2)]),app(id(eq),[id(n),num(0)]),app(id(isEven),[app(id(sub),[id(n),num(2)])])))),echo(num(10))]))."
Samples/APS0/fact.aps, yes, Bien typé., "prog(block([cmds(funRec(fact,int,[(n,int)],if(app(id(eq),[id(n),num(0)]),num(1),app(id(mul),[id(n),app(id(fact),[app(id(sub),[id(n),num(1)])])])))),echo(app(id(fact),[num(5)]))]))."
Samples/APS0/pgcd.aps, yes, Bien typé., "prog(block([cmds(funRec(pgcd,int,[(a,int),(b,int)],if(app(id(eq),[id(a),id(b)]),id(a),if(app(id(lt),[id(a),id(b)]),app(id(pgcd),[id(a),app(id(sub),[id(b),id(a)])]),app(id(pgcd),[app(id(sub),[id(a),id(b)]),id(b)]))))),echo(app(id(pgcd),[num(48),num(18)]))]))."
Samples/APS0/fib.aps, yes, Bien typé., "prog(block([cmds(funRec(fib,int,[(n,int)],if(app(id(lt),[id(n),num(2)]),id(n),app(id(add),[app(id(fib),[app(id(sub),[id(n),num(1)])]),app(id(fib),[app(id(sub),[id(n),num(2)])])])))),echo(app(id(fib),[num(10)]))]))."
Samples/APS0/pow.aps, yes, Bien typé., "prog(block([cmds(funRec(pow,int,[(base,int),(exponent,int)],if(app(id(eq),[id(exponent),num(0)]),num(1),app(id(mul),[id(base),app(id(pow),[id(base),app(id(sub),[id(exponent),num(1)])])])))),echo(app(id(pow),[num(2),num(8)]))]))."
Samples/ARG/ARGS.aps, yes, Bien typé., "prog(block([cmds(fun(f,int,[(x,int),(y,int)],app(id(add),[app(id(mul),[num(42),id(x)]),app(id(sub),[app(id(div),[id(y),num(2)]),num(42)])]))),echo(app(id(f),[num(1),num(100)]))]))."
Samples/APS1/set.aps, yes, Bien typé., "prog(block([cmds(var(x,int)),cmds(var(y,int)),set(id(x),num(10)),set(id(y),num(20)),echo(app(id(add),[id(x),id(y)]))]))."
Samples/APS1/proc.aps, yes, Bien typé., "prog(block([cmds(proc(addTwo,[(arg(x),int)],block([cmds(var(temp,int)),set(id(temp),app(id(add),[id(x),num(2)])),echo(id(temp))]))),cmds(var(value,int)),set(id(value),num(5)),call(id(addTwo),[id(value)])]))."
Samples/APS1/while.aps, yes, Bien typé., "prog(block([cmds(var(counter,int)),cmds(var(sum,int)),set(id(counter),num(5)),set(id(sum),num(0)),while(app(id(lt),[num(0),id(counter)]),block([set(id(sum),app(id(add),[id(sum),id(counter)])),set(id(counter),app(id(sub),[id(counter),num(1)]))])),echo(id(sum))]))."
Samples/prog2.aps, yes, Bien typé., "prog(block([cmds(const(hichem,int,num(21))),echo(app(id(add),[id(hichem),num(1)]))]))."
Samples/prog5.aps, yes, Bien typé., "prog(block([echo(if(id(true),num(2),num(3)))]))."
